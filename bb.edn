{:paths          ["scripts/bb"]
 :min-bb-version "1.0.164"
 :deps           {zprint/zprint               {:mvn/version "1.2.4"}
                  org.babashka/spec.alpha     {:git/url "https://github.com/babashka/spec.alpha"
                                               :git/sha "1a841c4cc1d4f6dab7505a98ed2d532dd9d56b78"}
                  nextdoc/salesforce-babashka {:git/url "git@github.com:nextdoc/salesforce-babashka.git"
                                               :git/sha "c8a92f835793b1ffe6798e13887c30e7c237f671"}}
 :tasks          {:requires               ([tasks]
                                           [zprint.core :as z])
                  :enter                  (println "Starting" (:name (current-task)) "...")
                  :leave                  (println "Finished" (:name (current-task)) "\n")

                  -parse-args              {:doc "parse the CLI arguments, validating them using the tasks spec"
                                            :task (def options (exec 'tasks/parse-dx-cli-options))}

                  nxd:scratch-org-list     {:doc "print a summary of scratch orgs"
                                           ; long form task showing individual task fns
                                            :task    (->> {:cli     "sf"
                                                           :command "env list"}
                                                          (tasks/cli-response)
                                                          (tasks/checked-result)
                                                          :scratchOrgs
                                                          (map :aliases)
                                                          (map first)
                                                          (z/czprint))}

                  nxd:create-scratch-org   {:doc "create a scratch org that is valid for 30 days. make it the default. assumes a default dev hub has been set."
                                            :depends [-parse-args]
                                            :task    (->> {:cli     "sfdx"
                                                           :command "force:org:create"
                                                           :args    {:definition-file      "config/project-scratch-def.json"
                                                                     :duration-days        30
                                                                     :wait                 6
                                                                     :set-alias            (:org-name options)
                                                                     :set-default-username true}}
                                                          (tasks/cli-response)
                                                          (tasks/checked-result)
                                                          (z/czprint))}

                  nxd:install-package {:doc "install Lightning Mapp package, version 0.5"
                                       :depends [nxd:create-scratch-org]
                                       :task (let [maps-version-id "04t1n000002WsInAAK"]
                                               (def app1-install-result
                                                 (->> {:cli     "sfdx"
                                                       :command "force:package:install"
                                                       :args {:package (str "\"" maps-version-id "\"")}}
                                                      (tasks/cli-response)
                                                      (tasks/checked-result))))}

                  nxd:check-install-package {:doc "poll the package install to wait till it succeeds"
                                             :depends [nxd:install-package]
                                             :task (-> {:command        (fn [_]
                                                                          {:cli        "sfdx"
                                                                           :command    "force:package:install:report"
                                                                           :args       {:request-id (:Id app1-install-result)}})
                                                        :success?       (fn [result]
                                                                          (println "     Install status:" (:Status result))
                                                                          (= "SUCCESS" (:Status result)))
                                                        :poll-max       12
                                                        :sleep-duration 5}
                                                       (tasks/poll-for-success!)
                                                       (tasks/checked-result))}

                  nxd:deploy-app           {:doc "deploy metadata from the force-app dir"
                                            :depends     [nxd:check-install-package]
                                           ; short form deploy function composing other tasks functions
                                            :task    (tasks/deploy-metadata! "force-app")}

                  nxd:create-and-open-org {:doc     "create a new scratch org, load metadata and data and open"
                                           :depends [nxd:deploy-app]
                                           :task    (tasks/cli-response {:cli     "sfdx"
                                                                         :command "force:org:open"})}

                  nxd:open                 {:doc     "open the default scratch org"
                                            :depends []
                                            :task    (-> {:cli     "sfdx"
                                                          :command "force:org:open"}
                                                         (tasks/cli-response)
                                                         (z/czprint))}}}
